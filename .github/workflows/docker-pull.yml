name: 拉取镜像推送

on:
  workflow_dispatch:
    inputs:
      IMAGE_NAME:
        description: '原镜像名称:版本'
        required: true
        default: 'mysql/mysql-server'
      NEW_NAME:
        description: '同步后镜像名称:版本'
        required: true
        default: 'mysql-server'
      TARGET_REGISTRY:
        description: '仓库地址'
        required: true
        default: 'reg.geeops.cn'
      TARGET_REPOSITORY:
        description: '空间名称'
        required: true
        default: 'public'
      ARCH:
        description: '系统架构'
        required: true
        default: 'amd64'
        type: choice
        options:
          - amd64
          - arm64
          - arm/v7
          - arm/v6
          - 386
          - s390x
          - ppc64le

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 移除冲突的 containerd 包
        run: sudo apt-get remove -y containerd

      - name: 检查并安装 Docker CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: 打印 Docker 版本信息
        run: docker --version

      - name: 验证 GitHub Secrets
        run: |
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD: [REDACTED]"

      - name: 登录到 Docker 仓库
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin reg.geeops.cn
        continue-on-error: true

      - name: 打印登录结果
        run: docker info

      - name: 检查 Docker 登录成功
        if: ${{ steps.login.outcome == 'success' }}
        run: echo "Docker 登录成功"

      - name: 检查 Docker 登录失败
        if: ${{ steps.login.outcome != 'success' }}
        run: echo "Docker 登录失败"

      - name: 拉取、标记并推送 Docker 镜像
        if: ${{ steps.login.outcome == 'success' }}
        id: pull_tag_push
        run: |
          docker pull --platform ${{ github.event.inputs.ARCH }} ${{ github.event.inputs.IMAGE_NAME }}
          docker tag ${{ github.event.inputs.IMAGE_NAME }} ${{ github.event.inputs.TARGET_REGISTRY }}/${{ github.event.inputs.TARGET_REPOSITORY }}/${{ github.event.inputs.NEW_NAME }}
          docker push ${{ github.event.inputs.TARGET_REGISTRY }}/${{ github.event.inputs.TARGET_REPOSITORY }}/${{ github.event.inputs.NEW_NAME }}
        continue-on-error: true

      - name: 检查镜像推送成功
        if: ${{ steps.pull_tag_push.outcome == 'success' }}
        run: echo "Docker 镜像推送成功"

      - name: 检查镜像推送失败
        if: ${{ steps.pull_tag_push.outcome != 'success' }}
        run: echo "Docker 镜像推送失败"
